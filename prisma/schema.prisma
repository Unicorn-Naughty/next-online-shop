generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//User
model User {
  id Int @unique @default(autoincrement())

  fullName String
  number   String
  address  String
  sex      String
  town     String
  email    String
  birthday DateTime?
  bonus    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  verificationDate DateTime?
  verificationCode VerificationCode?

  order Order[]
  cart  Cart?
  role  UserRole @default(USER)
}

enum UserRole {
  USER
  ADMIN
}

// VerificationCode
model VerificationCode {
  id   Int    @unique @default(autoincrement())
  code String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@unique([userId, code])
}

//Categories
model Category {
  id   Int    @unique @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  categoryItem CategoryItem[]
}

model CategoryItem {
  id   Int    @unique @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  products Product[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

//Products
model Product {
  id          Int      @unique @default(autoincrement())
  name        String
  imageURL    String
  imageURLBig String
  imageSlider String[]
  description String
  brand       String
  type        String
  volume      Int?
  tag         String?
  sale        Boolean?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  variants ProductVariant[]

  categoryItem   CategoryItem @relation(fields: [categoryItemId], references: [id])
  categoryItemId Int

  specifications   Specifications @relation(fields: [specificationsId], references: [id])
  specificationsId Int
}

model ProductVariant {
  id            Int    @unique @default(autoincrement())
  rest          Int
  price         Int
  variantVolume Int?
  article       String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  cartItems CartItem[]
}

model Specifications {
  id         Int      @unique @default(autoincrement())
  typeOfCare String[]
  effect     String[]
  country    String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  product Product[]
}

//Cart
model Cart {
  id          Int    @unique @default(autoincrement())
  totalAmount Int
  token       String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  items CartItem[]
}

model CartItem {
  id       Int @unique @default(autoincrement())
  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int
}

//Order

model Order {
  id          Int     @unique @default(autoincrement())
  token       String
  totalAmount Int
  paymentId   String?

  fullName String
  address  String
  email    String
  phone    String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  status OrderStatus @default(PENDING)
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

//Promocode
model Promocode {
  id            Int           @unique @default(autoincrement())
  sale          Int
  promocodeName PromocodeName
}

//Blog
model Blog {
  id          Int    @unique @default(autoincrement())
  title       String
  description String
  imageURL    String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum PromocodeName {
  PROMO_123
  PROMO_124
  PROMO_125
}
